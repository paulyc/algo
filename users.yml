---

- hosts: localhost
  gather_facts: False
  tags: always
  vars_files:
    - config.cfg

  tasks:
    - block:
        - pause:
            prompt: "Enter the IP address of your server: (or use localhost for local installation)"
          register: _server_ip
          when: server_ip is undefined

        - pause:
            prompt: Enter the password for the private CA key
            echo: false
          register: _ca_password
          when: ca_password is undefined

        - name: Set facts based on the input
          set_fact:
            algo_server_ip: >-
              {% if server_ip is defined %}{{ server_ip }}
              {%- elif _server_ip.user_input is defined and _server_ip.user_input != "" %}{{ _server_ip.user_input }}
              {%- else %}omit{% endif %}
            algo_ca_password: >-
              {% if ca_password is defined %}{{ ca_password }}
              {%- elif _ca_password.user_input is defined and _ca_password.user_input != "" %}{{ _ca_password.user_input }}
              {%- else %}omit{% endif %}

        - name: Import host specific variables
          include_vars:
            file: "configs/{{ algo_server_ip }}/config.yml"

        - name: Add the server to the vpn-host group
          add_host:
            hostname: "{{ algo_server_ip }}"
            groupname: vpn-host
            ansible_ssh_user: "{{ server_user|default('root') }}"
            ansible_python_interpreter: "/usr/bin/python2.7"
            algo_server_ip: "{{ algo_server_ip }}"
            easyrsa_CA_password: "{{ algo_ca_password }}"
            ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"

        - name: Wait until SSH becomes ready...
          local_action:
            module: wait_for
            port: 22
            host: "{{ algo_server_ip }}"
            search_regex: "OpenSSH"
            delay: 10
            timeout: 320
            state: present
          become: false
      rescue:
        - debug: var=fail_hint
          tags: always
        - fail:
          tags: always

- name: User management
  hosts: vpn-host
  gather_facts: true
  become: true
  vars_files:
    - config.cfg
    - "configs/{{ algo_server_ip }}/config.yml"

  pre_tasks:
    - block:
        - name: Common pre-tasks
          include_tasks: playbooks/common.yml
          tags: always
      rescue:
        - debug: var=fail_hint
          tags: always
        - fail:
          tags: always

  roles:
    - role: ssh_tunneling
      when: algo_ssh_tunneling
      tags: ssh_tunneling
    - role: vpn
      tags: vpn

  post_tasks:
    - block:
        - debug:
            msg:
              - "{{ congrats.common.split('\n') }}"
              - "    {% if p12.changed %}{{ congrats.p12_pass }}{% endif %}"
          tags: always
      rescue:
        - debug: var=fail_hint
          tags: always
        - fail:
          tags: always
